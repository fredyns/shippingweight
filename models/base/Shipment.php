<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "shipment".
 *
 * @property integer $id
 * @property integer $shipper_id
 * @property string $container_number
 * @property string $container_status
 * @property string $payment_status
 * @property integer $payment_bill
 * @property string $payment_date
 * @property integer $payment_by
 * @property integer $created_by
 * @property integer $updated_by
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property \app\models\Certificate[] $certificates
 * @property \app\models\Shipper $shipper
 * @property string $aliasModel
 */
abstract class Shipment extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const CONTAINER_STATUS_NEW = 'new';
    const CONTAINER_STATUS_CERTIFIED = 'certified';
    const PAYMENT_STATUS_BILLED = 'billed';
    const PAYMENT_STATUS_PAID = 'paid';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'shipment';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
            ],
            [
                'class' => TimestampBehavior::className(),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['shipper_id', 'payment_bill', 'payment_by'], 'integer'],
            [['container_status', 'payment_status'], 'string'],
            [['payment_date'], 'safe'],
            [['container_number'], 'string', 'max' => 255],
            [['shipper_id'], 'exist', 'skipOnError' => true, 'targetClass' => Shipper::className(), 'targetAttribute' => ['shipper_id' => 'id']],
            ['container_status', 'in', 'range' => [
                    self::CONTAINER_STATUS_NEW,
                    self::CONTAINER_STATUS_CERTIFIED,
                ]
            ],
            ['payment_status', 'in', 'range' => [
                    self::PAYMENT_STATUS_BILLED,
                    self::PAYMENT_STATUS_PAID,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'shipper_id' => 'Shipper ID',
            'container_number' => 'Container Number',
            'container_status' => 'Container Status',
            'payment_status' => 'Payment Status',
            'payment_bill' => 'Payment Bill',
            'payment_date' => 'Payment Date',
            'payment_by' => 'Payment By',
            'created_by' => 'Created By',
            'updated_by' => 'Updated By',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCertificates()
    {
        return $this->hasMany(\app\models\Certificate::className(), ['shipment_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getShipper()
    {
        return $this->hasOne(\app\models\Shipper::className(), ['id' => 'shipper_id']);
    }




    /**
     * get column container_status enum value label
     * @param string $value
     * @return string
     */
    public static function getContainerStatusValueLabel($value){
        $labels = self::optsContainerStatus();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column container_status ENUM value labels
     * @return array
     */
    public static function optsContainerStatus()
    {
        return [
            self::CONTAINER_STATUS_NEW => self::CONTAINER_STATUS_NEW,
            self::CONTAINER_STATUS_CERTIFIED => self::CONTAINER_STATUS_CERTIFIED,
        ];
    }

    /**
     * get column payment_status enum value label
     * @param string $value
     * @return string
     */
    public static function getPaymentStatusValueLabel($value){
        $labels = self::optsPaymentStatus();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column payment_status ENUM value labels
     * @return array
     */
    public static function optsPaymentStatus()
    {
        return [
            self::PAYMENT_STATUS_BILLED => self::PAYMENT_STATUS_BILLED,
            self::PAYMENT_STATUS_PAID => self::PAYMENT_STATUS_PAID,
        ];
    }

}
