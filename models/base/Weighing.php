<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "weighing".
 *
 * @property integer $id
 * @property string $job_order
 * @property string $container_number
 * @property string $measurement_method
 * @property integer $measured_at
 * @property double $grossmass
 * @property double $gatein_grossmass
 * @property string $gatein_trackNumber
 * @property double $gateout_grossmass
 * @property string $gateout_trackNumber
 * @property integer $created_by
 * @property integer $updated_by
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property \app\models\Certificate[] $certificates
 * @property string $aliasModel
 */
abstract class Weighing extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const MEASUREMENT_METHOD_1 = '1';
    const MEASUREMENT_METHOD_2 = '2';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'weighing';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
            ],
            [
                'class' => TimestampBehavior::className(),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['measurement_method'], 'string'],
            [['measured_at'], 'integer'],
            [['grossmass', 'gatein_grossmass', 'gateout_grossmass'], 'number'],
            [['job_order', 'container_number', 'gatein_trackNumber', 'gateout_trackNumber'], 'string', 'max' => 255],
            ['measurement_method', 'in', 'range' => [
                    self::MEASUREMENT_METHOD_1,
                    self::MEASUREMENT_METHOD_2,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'job_order' => 'Job Order',
            'container_number' => 'Container Number',
            'measurement_method' => 'Measurement Method',
            'measured_at' => 'Measured At',
            'grossmass' => 'Grossmass',
            'gatein_grossmass' => 'Gatein Grossmass',
            'gatein_trackNumber' => 'Gatein Track Number',
            'gateout_grossmass' => 'Gateout Grossmass',
            'gateout_trackNumber' => 'Gateout Track Number',
            'created_by' => 'Created By',
            'updated_by' => 'Updated By',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCertificates()
    {
        return $this->hasMany(\app\models\Certificate::className(), ['weighing_id' => 'id']);
    }




    /**
     * get column measurement_method enum value label
     * @param string $value
     * @return string
     */
    public static function getMeasurementMethodValueLabel($value){
        $labels = self::optsMeasurementMethod();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column measurement_method ENUM value labels
     * @return array
     */
    public static function optsMeasurementMethod()
    {
        return [
            self::MEASUREMENT_METHOD_1 => self::MEASUREMENT_METHOD_1,
            self::MEASUREMENT_METHOD_2 => self::MEASUREMENT_METHOD_2,
        ];
    }

}
