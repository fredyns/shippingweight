<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "container".
 *
 * @property integer $id
 * @property integer $shipper_id
 * @property string $number
 * @property string $booking_number
 * @property string $status
 * @property integer $payment_id
 * @property integer $bill
 * @property double $grossmass
 * @property string $weighing_date
 * @property integer $certificate_sequence
 * @property string $certificate_number
 * @property string $certificate_file
 * @property integer $billed_by
 * @property integer $verified_by
 * @property integer $checked_by
 * @property integer $sentOwner_by
 * @property integer $sentShipper_by
 * @property integer $billed_at
 * @property integer $checked_at
 * @property integer $verified_at
 * @property integer $sentOwner_at
 * @property integer $sentShipper_at
 * @property integer $created_by
 * @property integer $updated_by
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property \app\models\Shipper $shipper
 * @property \app\models\Payment $payment
 * @property string $aliasModel
 */
abstract class Container extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const STATUS_REGISTERED = 'registered';
    const STATUS_READY = 'ready';
    const STATUS_VERIFIED = 'verified';
    const STATUS_ALERT = 'alert';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'container';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
            ],
            [
                'class' => TimestampBehavior::className(),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['shipper_id', 'number'], 'required'],
            [['shipper_id', 'payment_id', 'bill', 'certificate_sequence', 'billed_by', 'verified_by', 'checked_by', 'sentOwner_by', 'sentShipper_by', 'billed_at', 'checked_at', 'verified_at', 'sentOwner_at', 'sentShipper_at'], 'integer'],
            [['status', 'certificate_file'], 'string'],
            [['grossmass'], 'number'],
            [['weighing_date'], 'safe'],
            [['number', 'booking_number', 'certificate_number'], 'string', 'max' => 64],
            [['shipper_id'], 'exist', 'skipOnError' => true, 'targetClass' => Shipper::className(), 'targetAttribute' => ['shipper_id' => 'id']],
            [['payment_id'], 'exist', 'skipOnError' => true, 'targetClass' => Payment::className(), 'targetAttribute' => ['payment_id' => 'id']],
            ['status', 'in', 'range' => [
                    self::STATUS_REGISTERED,
                    self::STATUS_READY,
                    self::STATUS_VERIFIED,
                    self::STATUS_ALERT,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'shipper_id' => 'Shipper ID',
            'number' => 'Number',
            'booking_number' => 'Booking Number',
            'status' => 'Status',
            'payment_id' => 'Payment ID',
            'bill' => 'Bill',
            'grossmass' => 'Grossmass',
            'weighing_date' => 'Weighing Date',
            'certificate_sequence' => 'Certificate Sequence',
            'certificate_number' => 'Certificate Number',
            'certificate_file' => 'Certificate File',
            'created_by' => 'Created By',
            'updated_by' => 'Updated By',
            'billed_by' => 'Billed By',
            'verified_by' => 'Verified By',
            'checked_by' => 'Checked By',
            'sentOwner_by' => 'Sent Owner By',
            'sentShipper_by' => 'Sent Shipper By',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'billed_at' => 'Billed At',
            'checked_at' => 'Checked At',
            'verified_at' => 'Verified At',
            'sentOwner_at' => 'Sent Owner At',
            'sentShipper_at' => 'Sent Shipper At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getShipper()
    {
        return $this->hasOne(\app\models\Shipper::className(), ['id' => 'shipper_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPayment()
    {
        return $this->hasOne(\app\models\Payment::className(), ['id' => 'payment_id']);
    }




    /**
     * get column status enum value label
     * @param string $value
     * @return string
     */
    public static function getStatusValueLabel($value){
        $labels = self::optsStatus();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column status ENUM value labels
     * @return array
     */
    public static function optsStatus()
    {
        return [
            self::STATUS_REGISTERED => self::STATUS_REGISTERED,
            self::STATUS_READY => self::STATUS_READY,
            self::STATUS_VERIFIED => self::STATUS_VERIFIED,
            self::STATUS_ALERT => self::STATUS_ALERT,
        ];
    }

}
